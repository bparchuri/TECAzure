{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfpcrmdev01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQLcalendar_dates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPocTec",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Service_id",
						"type": "varchar"
					},
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "Exception_type",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "calendar_dates_update"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLroutes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPocTec",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Route_id",
						"type": "varchar"
					},
					{
						"name": "Agency_id",
						"type": "varchar"
					},
					{
						"name": "Route_short_name",
						"type": "varchar"
					},
					{
						"name": "Route_long_name",
						"type": "varchar"
					},
					{
						"name": "Route_desc",
						"type": "varchar"
					},
					{
						"name": "Route_type",
						"type": "varchar"
					},
					{
						"name": "Route_url",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Routes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLshapes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPocTec",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "shape_id",
						"type": "varchar"
					},
					{
						"name": "shape_pt_lat",
						"type": "varchar"
					},
					{
						"name": "shape_pt_lon",
						"type": "varchar"
					},
					{
						"name": "shape_pt_sequence",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Shapes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLstop_times')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPocTec",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Trip_id",
						"type": "varchar"
					},
					{
						"name": "Arrival_time",
						"type": "varchar"
					},
					{
						"name": "Departure_time",
						"type": "varchar"
					},
					{
						"name": "Stop_id",
						"type": "varchar"
					},
					{
						"name": "Stop_sequence",
						"type": "varchar"
					},
					{
						"name": "Pickup_type",
						"type": "varchar"
					},
					{
						"name": "Drop_off_type",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Stop_Times"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLstops')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPocTec",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Stop_id",
						"type": "varchar"
					},
					{
						"name": "Stop_code",
						"type": "varchar"
					},
					{
						"name": "Stop_name",
						"type": "varchar"
					},
					{
						"name": "Stop_desc",
						"type": "varchar"
					},
					{
						"name": "Stop_lat",
						"type": "varchar"
					},
					{
						"name": "Stop_lon",
						"type": "varchar"
					},
					{
						"name": "Zone_id",
						"type": "varchar"
					},
					{
						"name": "Stop_url",
						"type": "varchar"
					},
					{
						"name": "Location_type",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Stops"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLtrips')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPocTec",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Route_id",
						"type": "varchar"
					},
					{
						"name": "Service_id",
						"type": "varchar"
					},
					{
						"name": "Trip_id",
						"type": "varchar"
					},
					{
						"name": "Trip_short_name",
						"type": "varchar"
					},
					{
						"name": "Direction_id",
						"type": "varchar"
					},
					{
						"name": "Block_id",
						"type": "varchar"
					},
					{
						"name": "Shape_id",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Trips"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TECDevCRM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TecDevCRM",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DynamicsCrmEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "bd_lignes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnzipFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "PocTecUnzip",
						"fileSystem": "poc-tec"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "PocTecZip",
						"fileSystem": "poc-tec"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/binary_CODAFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService_ADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "BelfiusCDA20200625_212325_582_OS1TMGH25F_235242590.COD",
						"folderPath": "CODA/Source",
						"fileSystem": "integrations-tec"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/binary_CODAcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService_ADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "coda.csv",
						"folderPath": "CODA/CSV",
						"fileSystem": "integrations-tec"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tecdevcrmconnection')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TecDevCRM",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DynamicsCrmEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "tec_eis779atlas"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CODAIntegration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy SQL Join to CODA Integration",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select \nNine.RegistrationID AS Nine_RegistrationId,\nNine.Numberofrecords AS Nine_Numberofrecords,\nNine.DebitRevenue AS Nine_DebitRevenue,\nNine.CreditSales AS Nine_CreditSales,\nNine.Multiplefilecode AS Nine_Multiplefilecode,\nEight.RegistrationID AS Eight_RegistrationId,\nEight.Accountnumber AS Eight_Accountnumber,\nEight.NewBalance AS Eight_NewBalance ,\nEight.Dateofnewbalance AS Eight_Dateofnewbalance,\nOne.RegistrationID AS One_RegistrationId,\nOne.BankAccountType AS One_BankAccountType,\nOne.Sequencenumberofpaperaccount AS One_Sequencenumberofpaperaccount,\nOne.Accountnumber AS One_Accountnumber,\nOne.Oldbalance AS One_Oldbalance,\nOne.Oldpay AS One_Oldpay ,\nOne.Dateofoldbalance AS One_Dateofoldbalance,\nOne.Accountholdername AS One_Accountholdername,\nTwoOne.RegistrationID AS TwoOne_RegistrationId,\nTwoOne.Sequencenumber AS TwoOne_Sequencenumber,\nTwoOne.Amount AS TwoOne_Amount,\nTwoOne.Valuedate AS TwoOne_Valuedate,\nTwoOne.Accountdate AS TwoOne_Accountdate,\nTwoTwo.RegistrationID AS TwoTwo_RegistrationId,\nTwoTwo.Customerreference AS TwoTwo_Customerreference,\nTwoTwo.BIC AS TwoTwo_BIC,\nTwoTwo.Linkcode AS TwoTwo_Linkcode,\nTwoThree.RegistrationID AS TwoThree_RegistrationId,\nTwoThree.ArticleCode AS TwoThree_ArticleCode,\nTwoThree.Counterpartyaccountnumber AS TwoThree_Counterpartyaccountnumber,\nTwoThree.Nameofcounterparty AS TwoThree_Nameofcounterparty,\nTwoThree.SuiteCode AS TwoThree_SuiteCode,\nThreeOne.RegistrationID AS ThreeOne_RegistrationId,\nThreeOne.ArticleCode AS ThreeOne_ArticleCode,\nThreeOne.CommunicationCode AS ThreeOne_CommunicationCode,\nThreeOne.MoreCode AS ThreeOne_MoreCode,\nThreeTwo.RegistrationID AS ThreeTwo_RegistrationId,\nThreeTwo.Sequencenumber AS ThreeTwo_Sequencenumber ,\nThreeTwo.ArticleCode AS ThreeTwo_ArticleCode,\nThreeTwo.Communication AS ThreeTwo_Communication,\nZero.RecordIdentification AS Zero_RecordIdentification,\nZero.CreationDate AS Zero_CreationDate ,\nZero.BankIdentificationNumber AS Zero_BankIdentificationNumber,\nZero.ApplicationCode AS Zero_ApplicationCode,\nZero.BIC AS Zero_BIC,\nZero.IdentificationNumberofBelgium AS Zero_IdentificationNumberofBelgium\nfrom \n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-21]) TwoOne \nJoin\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-22]) TwoTwo on TwoOne.row_num = TwoTwo.row_num\nLeft OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-23]) TwoThree on TwoThree.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-31]) ThreeOne on ThreeOne.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-32]) ThreeTwo on ThreeTwo.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-33]) ThreeThree on ThreeThree.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-1]) One on One.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-8]) Eight on Eight.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-9]) Nine on Nine.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RecordIdentification) AS row_num FROM [dbo].[COD-0]) Zero on Zero.row_num = TwoTwo.row_num",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Nine_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Nine_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nine_Numberofrecords",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Nine_Numberofrecords",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nine_DebitRevenue",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "Nine_DebitRevenue",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Nine_CreditSales",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "Nine_CreditSales",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Nine_Multiplefilecode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Nine_Multiplefilecode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eight_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Eight_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eight_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Eight_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eight_NewBalance",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "Eight_NewBalance",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Eight_Dateofnewbalance",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Eight_Dateofnewbalance",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "One_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_BankAccountType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_BankAccountType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Sequencenumberofpaperaccount",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Sequencenumberofpaperaccount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Oldbalance",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Oldbalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Oldpay",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "One_Oldpay",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "One_Dateofoldbalance",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "One_Dateofoldbalance",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "One_Accountholdername",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Accountholdername",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoOne_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoOne_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoOne_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoOne_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoOne_Amount",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "TwoOne_Amount",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "TwoOne_Valuedate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "TwoOne_Valuedate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TwoOne_Accountdate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "TwoOne_Accountdate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TwoTwo_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoTwo_Customerreference",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_Customerreference",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoTwo_BIC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_BIC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoTwo_Linkcode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_Linkcode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_Counterpartyaccountnumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_Counterpartyaccountnumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_Nameofcounterparty",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_Nameofcounterparty",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_SuiteCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_SuiteCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_CommunicationCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_CommunicationCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_MoreCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_MoreCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_Communication",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_Communication",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_RecordIdentification",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_RecordIdentification",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_CreationDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Zero_CreationDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Zero_BankIdentificationNumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_BankIdentificationNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_ApplicationCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_ApplicationCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_BIC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_BIC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_IdentificationNumberofBelgium",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_IdentificationNumberofBelgium",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable14",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable15",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CODAIntegration_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy SQL Join to CODA Integration",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select \nNine.RegistrationID AS Nine_RegistrationId,\nNine.Numberofrecords AS Nine_Numberofrecords,\nNine.DebitRevenue AS Nine_DebitRevenue,\nNine.CreditSales AS Nine_CreditSales,\nNine.Multiplefilecode AS Nine_Multiplefilecode,\nEight.RegistrationID AS Eight_RegistrationId,\nEight.Accountnumber AS Eight_Accountnumber,\nEight.NewBalance AS Eight_NewBalance ,\nEight.Dateofnewbalance AS Eight_Dateofnewbalance,\nOne.RegistrationID AS One_RegistrationId,\nOne.BankAccountType AS One_BankAccountType,\nOne.Sequencenumberofpaperaccount AS One_Sequencenumberofpaperaccount,\nOne.Accountnumber AS One_Accountnumber,\nOne.Oldbalance AS One_Oldbalance,\nOne.Oldpay AS One_Oldpay ,\nOne.Dateofoldbalance AS One_Dateofoldbalance,\nOne.Accountholdername AS One_Accountholdername,\nTwoOne.RegistrationID AS TwoOne_RegistrationId,\nTwoOne.Sequencenumber AS TwoOne_Sequencenumber,\nTwoOne.Amount AS TwoOne_Amount,\nTwoOne.Valuedate AS TwoOne_Valuedate,\nTwoOne.Accountdate AS TwoOne_Accountdate,\nTwoTwo.RegistrationID AS TwoTwo_RegistrationId,\nTwoTwo.Customerreference AS TwoTwo_Customerreference,\nTwoTwo.BIC AS TwoTwo_BIC,\nTwoTwo.Linkcode AS TwoTwo_Linkcode,\nTwoThree.RegistrationID AS TwoThree_RegistrationId,\nTwoThree.ArticleCode AS TwoThree_ArticleCode,\nTwoThree.Counterpartyaccountnumber AS TwoThree_Counterpartyaccountnumber,\nTwoThree.Nameofcounterparty AS TwoThree_Nameofcounterparty,\nTwoThree.SuiteCode AS TwoThree_SuiteCode,\nThreeOne.RegistrationID AS ThreeOne_RegistrationId,\nThreeOne.ArticleCode AS ThreeOne_ArticleCode,\nThreeOne.CommunicationCode AS ThreeOne_CommunicationCode,\nThreeOne.MoreCode AS ThreeOne_MoreCode,\nThreeTwo.RegistrationID AS ThreeTwo_RegistrationId,\nThreeTwo.Sequencenumber AS ThreeTwo_Sequencenumber ,\nThreeTwo.ArticleCode AS ThreeTwo_ArticleCode,\nThreeTwo.Communication AS ThreeTwo_Communication,\nZero.RecordIdentification AS Zero_RecordIdentification,\nZero.CreationDate AS Zero_CreationDate ,\nZero.BankIdentificationNumber AS Zero_BankIdentificationNumber,\nZero.ApplicationCode AS Zero_ApplicationCode,\nZero.BIC AS Zero_BIC,\nZero.IdentificationNumberofBelgium AS Zero_IdentificationNumberofBelgium\nfrom \n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-21]) TwoOne \nJoin\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-22]) TwoTwo on TwoOne.row_num = TwoTwo.row_num\nLeft OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-23]) TwoThree on TwoThree.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-31]) ThreeOne on ThreeOne.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-32]) ThreeTwo on ThreeTwo.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-33]) ThreeThree on ThreeThree.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-1]) One on One.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-8]) Eight on Eight.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RegistrationID) AS row_num FROM [dbo].[COD-9]) Nine on Nine.row_num = TwoTwo.row_num\nLEFT OUTER Join\n(SELECT * , ROW_NUMBER() OVER (ORDER BY RecordIdentification) AS row_num FROM [dbo].[COD-0]) Zero on Zero.row_num = TwoTwo.row_num",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Nine_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Nine_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nine_Numberofrecords",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Nine_Numberofrecords",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nine_DebitRevenue",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "Nine_DebitRevenue",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Nine_CreditSales",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "Nine_CreditSales",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Nine_Multiplefilecode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Nine_Multiplefilecode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eight_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Eight_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eight_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Eight_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eight_NewBalance",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "Eight_NewBalance",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Eight_Dateofnewbalance",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Eight_Dateofnewbalance",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "One_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_BankAccountType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_BankAccountType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Sequencenumberofpaperaccount",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Sequencenumberofpaperaccount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Accountnumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Oldbalance",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Oldbalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "One_Oldpay",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "One_Oldpay",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "One_Dateofoldbalance",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "One_Dateofoldbalance",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "One_Accountholdername",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "One_Accountholdername",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoOne_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoOne_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoOne_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoOne_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoOne_Amount",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "TwoOne_Amount",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "TwoOne_Valuedate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "TwoOne_Valuedate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TwoOne_Accountdate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "TwoOne_Accountdate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TwoTwo_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoTwo_Customerreference",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_Customerreference",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoTwo_BIC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_BIC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoTwo_Linkcode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoTwo_Linkcode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_Counterpartyaccountnumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_Counterpartyaccountnumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_Nameofcounterparty",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_Nameofcounterparty",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TwoThree_SuiteCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TwoThird_SuiteCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_CommunicationCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_CommunicationCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeOne_MoreCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdOne_MoreCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_RegistrationId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_RegistrationID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_Sequencenumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_ArticleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ThreeTwo_Communication",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ThirdTwo_Communication",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_RecordIdentification",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_RecordIdentification",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_CreationDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Zero_CreationDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Zero_BankIdentificationNumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_BankIdentificationNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_ApplicationCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_ApplicationCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_BIC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_BIC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Zero_IdentificationNumberofBelgium",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Zero_IdentificationNumberofBelgium",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable_CODAIntegration",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_CODAJoin",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLtoGTFS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyallSQLtablestoGTFS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "delete from GTFS\nSELECT TOP(10) Agencies.Agency_name,\n      10 AS Agency_id,\n      Agencies.Agency_url,\n      Agencies.Agency_timezone,\n      Agencies.Agency_lang,\n      Agencies.Agency_phone,\n\t  Route.Route_id,\n\t  Route.Route_short_name,\n\t  Route.Route_long_name,\n\t  Route.Route_desc,\n\t  10 AS Route_type,\n\t  Route.Route_url,\n\t  trip.Trip_id,\n\t  CONVERT(int, trip.Trip_short_name) AS Trip_short_name,\n\t  10 AS Direction_id,\n\t  trip.Block_id,\n\t  Cal.Service_id,\t  \n          case when Cal.Monday = '0' \n            then 0 \n            else 1 \n          end as Monday,   \n\t\t  case when Cal.Tuesday = '0' \n            then 0 \n            else 1 \n          end as Tuesday, \n\t\t  case when Cal.Wednesday = '0' \n            then 0 \n            else 1 \n          end as Wednesday, \n\t\t  case when Cal.Thursday = '0' \n            then 0 \n            else 1 \n          end as Thursday, \n\t\t case when Cal.Friday = '0' \n            then 0 \n            else 1 \n          end as Friday, \n\t\t  case when Cal.Saturday = '0' \n            then 0 \n            else 1 \n          end as Saturday, \n\t\t case when Cal.Sunday = '0' \n            then 0 \n            else 1 \n          end as Sunday, \n\t  Cal.Start_date,\n\t  Cal.End_date,\n\t  CalDate.Date,\n\t  10 AS Exception_type,\n\t  Shape.shape_id,\n\t  CONVERT(DOUBLE PRECISION, Shape.shape_pt_lat) AS shape_pt_lat,\n\t  CONVERT(DOUBLE PRECISION, Shape.shape_pt_lon) AS shape_pt_lon,\n\t  CONVERT(int, Shape.shape_pt_sequence) AS shape_pt_sequence,\n\t  NEWID() as GuId\n  FROM [Routes] Route\n  LEFT JOIN [Agency] Agencies\n    ON Route.Agency_id = Agencies.Agency_id\t\n\tJOIN [Trips] trip\n    ON Route.Route_id = trip.Route_id\n\tJOIN [CalendarUpdate] Cal\n    ON Cal.Service_id=trip.Service_id\n\tJOIN [calendar_dates_update] CalDate\n\t ON Cal.Service_id=CalDate.Service_id\n\tJOIN [Shapes] Shape\n    ON Shape.shape_id = trip.Shape_id\n  ORDER by Agencies.Agency_id",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "GuId",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "Agency_id",
											"type": "Int32"
										},
										"sink": {
											"name": "Agency_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agency_name",
											"type": "String"
										},
										"sink": {
											"name": "Agency_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agency_timezone",
											"type": "String"
										},
										"sink": {
											"name": "Agency_timezone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agency_lang",
											"type": "String"
										},
										"sink": {
											"name": "Agency_lang",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agency_phone",
											"type": "String"
										},
										"sink": {
											"name": "Agency_phone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_id",
											"type": "String"
										},
										"sink": {
											"name": "Route_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_short_name",
											"type": "String"
										},
										"sink": {
											"name": "Route_short_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_long_name",
											"type": "String"
										},
										"sink": {
											"name": "Route_long_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_desc",
											"type": "String"
										},
										"sink": {
											"name": "Route_desc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_type",
											"type": "Int32"
										},
										"sink": {
											"name": "Route_type",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Route_url",
											"type": "String"
										},
										"sink": {
											"name": "Route_url",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Trip_id",
											"type": "String"
										},
										"sink": {
											"name": "Trip_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Trip_short_name",
											"type": "Int32"
										},
										"sink": {
											"name": "Trip_short_name",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Direction_id",
											"type": "Int32"
										},
										"sink": {
											"name": "Direction_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Block_id",
											"type": "String"
										},
										"sink": {
											"name": "Block_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Service_id",
											"type": "String"
										},
										"sink": {
											"name": "Service_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Monday",
											"type": "Int32"
										},
										"sink": {
											"name": "Monday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Tuesday",
											"type": "Int32"
										},
										"sink": {
											"name": "Tuesday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Wednesday",
											"type": "Int32"
										},
										"sink": {
											"name": "Wednesday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Thursday",
											"type": "Int32"
										},
										"sink": {
											"name": "Thursday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Friday",
											"type": "Int32"
										},
										"sink": {
											"name": "Friday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Saturday",
											"type": "Int32"
										},
										"sink": {
											"name": "Saturday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Sunday",
											"type": "Int32"
										},
										"sink": {
											"name": "Sunday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Start_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "Start_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "End_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "End_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Exception_type",
											"type": "Int32"
										},
										"sink": {
											"name": "Exception_type",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "shape_id",
											"type": "String"
										},
										"sink": {
											"name": "shape_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "shape_pt_lat",
											"type": "Double"
										},
										"sink": {
											"name": "shape_pt_lat",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "shape_pt_lon",
											"type": "Double"
										},
										"sink": {
											"name": "shape_pt_lon",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "shape_pt_sequence",
											"type": "Int32"
										},
										"sink": {
											"name": "shape_pt_sequence",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agency_url",
											"type": "String"
										},
										"sink": {
											"name": "Agency_url",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SQLGTFSTableConnection",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "GTFSSQLSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data from SQL to CRM",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyallSQLtablestoGTFS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DynamicsCrmSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "bd_lignesid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "Agency_id",
											"type": "Int32"
										},
										"sink": {
											"name": "bd_agency_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agency_name",
											"type": "String"
										},
										"sink": {
											"name": "bd_agency_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agency_phone",
											"type": "String"
										},
										"sink": {
											"name": "bd_agency_phone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agency_url",
											"type": "String"
										},
										"sink": {
											"name": "bd_agency_url",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_id",
											"type": "String"
										},
										"sink": {
											"name": "bd_route_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Route_type",
											"type": "Int32"
										},
										"sink": {
											"name": "bd_route_type",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Route_url",
											"type": "String"
										},
										"sink": {
											"name": "bd_route_url",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Service_id",
											"type": "String"
										},
										"sink": {
											"name": "bd_services_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Thursday",
											"type": "Boolean"
										},
										"sink": {
											"name": "bd_thursday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Friday",
											"type": "Boolean"
										},
										"sink": {
											"name": "bd_friday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Saturday",
											"type": "Boolean"
										},
										"sink": {
											"name": "bd_saturday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Sunday",
											"type": "Boolean"
										},
										"sink": {
											"name": "bd_sunday",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Start_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "bd_start_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "End_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "bd_end_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Exception_type",
											"type": "Int32"
										},
										"sink": {
											"name": "bd_exception_type",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "shape_id",
											"type": "String"
										},
										"sink": {
											"name": "bd_shape_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Direction_id",
											"type": "Int32"
										},
										"sink": {
											"name": "bd_direction_id",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "GTFSSQLSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TECDevCRM",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TECDevCRM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unzip 7z file to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebHook",
						"type": "WebHook",
						"dependsOn": [
							{
								"activity": "Set variable of unzip foldername",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://73b5abb6-b245-4036-a400-b70e2ee719cd.webhook.ne.azure-automation.net/webhooks?token=8LyOr5IWcaX0XlNXtAVn4%2bBho02rNT9g5unFl2cEnR4%3d",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(\nconcat(\n'\n{\n\"connectionName\":\"',variables('varConnectionName'),'\",\"storageAccountKey\":\"',variables('storageAccountKey'),'\",\"fileName\":\"',variables('fileName'),'\"\n,\"zipfolder\":\"',variables('zipfolder'),'\"\n,\"Unzipfolder\":\"',variables('Unzipfolder'),'\"\n,\"extractfolder\":\"',variables('extractfolder'),'\"\n,\"dataLakeStorageGen1Name\":\"',variables('dataLakeStorageGen1Name'),'\"\n}'))",
								"type": "Expression"
							},
							"timeout": "00:10:00",
							"reportStatusOnCallBack": true
						}
					},
					{
						"name": "Copy Zip file to ADLS",
						"description": "t",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "Datatest/"
							},
							{
								"name": "Destination",
								"value": "tec-zip//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "ZipFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UnzipFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Metadata of Zip File",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy Zip file to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZipFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter 7z files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata of Unzip File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata of Zip File').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.7z')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable of zip file name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filter 7z files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@string(activity('Filter 7z files').output.value[0].name)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable of zip folder name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable of zip file name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "zipfolder",
							"value": {
								"value": "@activity('Get Metadata of Zip File').output.itemName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable of unzip foldername",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable of zip folder name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Unzipfolder",
							"value": {
								"value": "@activity('Get Metadata of Unzip File').output.itemName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Metadata of Unzip File",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Metadata of Zip File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "UnzipFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"variables": {
					"varConnectionName": {
						"type": "String",
						"defaultValue": "AzureRunAsConnection"
					},
					"storageAccountKey": {
						"type": "String",
						"defaultValue": " YDuDqj7C2A+fWSpmuibYXlDAsVRyIXQpgZcCtm23kUEFTsYFMvZbxhUmBHmbgHEeNcCmukz6O1Iji7H6deZPiw=="
					},
					"fileName": {
						"type": "String",
						"defaultValue": "TECValidation.7z"
					},
					"zipfolder": {
						"type": "String",
						"defaultValue": "PocTecZip"
					},
					"Unzipfolder": {
						"type": "String",
						"defaultValue": "PocTecUnzip"
					},
					"extractfolder": {
						"type": "String",
						"defaultValue": "7Zfiles"
					},
					"dataLakeStorageGen1Name": {
						"type": "String",
						"defaultValue": "dlspoctec"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZipFile')]",
				"[concat(variables('factoryId'), '/datasets/UnzipFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Validations_DLS_SQLValidations_SQLPowerAPP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data to SQL Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CSVtoSQLtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TOP (1000) [FaultId]\n      ,[FaultDesc]\n      ,[FaultCustomerNumber]\n      ,[Date]\n  FROM [dbo].[TECData]",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FaultId",
											"type": "Int32"
										},
										"sink": {
											"name": "FaultId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "FaultDesc",
											"type": "String"
										},
										"sink": {
											"name": "FaultDesc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FaultCustomerNumber",
											"type": "String"
										},
										"sink": {
											"name": "FaultCustomerNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SQLTEC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLValidations",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CSVtoSQLtable",
						"description": "t",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FaultId",
											"type": "String"
										},
										"sink": {
											"name": "FaultId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "FaultDesc",
											"type": "String"
										},
										"sink": {
											"name": "FaultDesc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FaultCustomerName",
											"type": "String"
										},
										"sink": {
											"name": "FaultCustomerNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ADLSV2CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLTECData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSegments')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataflowSQLEIS779",
								"type": "DatasetReference"
							},
							"name": "dataflowSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLSegment0",
								"type": "DatasetReference"
							},
							"name": "SQLSegment0"
						},
						{
							"dataset": {
								"referenceName": "SQLSegment1",
								"type": "DatasetReference"
							},
							"name": "SQLSegment1"
						},
						{
							"dataset": {
								"referenceName": "SQLSegment2",
								"type": "DatasetReference"
							},
							"name": "SQLSegment2"
						},
						{
							"dataset": {
								"referenceName": "SQLSegment3",
								"type": "DatasetReference"
							},
							"name": "SQLSegment3"
						},
						{
							"dataset": {
								"referenceName": "SQLSegment4",
								"type": "DatasetReference"
							},
							"name": "SQLSegment4"
						},
						{
							"dataset": {
								"referenceName": "SQLSegment5",
								"type": "DatasetReference"
							},
							"name": "SQLSegment5"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "DerivedColumnSeg0"
						},
						{
							"name": "DerivedColumnSeg1"
						},
						{
							"name": "DerivedColumnSeg2"
						},
						{
							"name": "DerivedColumnSeg3"
						},
						{
							"name": "DerivedColumnseg5"
						},
						{
							"name": "DerivedColumnSeg4"
						}
					],
					"script": "source(output(\n\t\tCode_segment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> dataflowSource\ndataflowSource split(like(Code_segment,'000%'),\n\tlike(Code_segment,'005%'),\n\tlike(Code_segment,'004%'),\n\tlike(Code_segment,'003%'),\n\tlike(Code_segment,'002%'),\n\tlike(Code_segment,'001%'),\n\tdisjoint: true,\n\tpartitionBy('roundRobin', 2)) ~> ConditionalSplit@(Segment0, Segment5, Segment4, Segment3, Segment2, Segment1, Others)\nConditionalSplit@Segment0 derive(Column1 = split(Code_segment,';')[1],\n\t\tColumn2 = split(Code_segment,';')[2]) ~> DerivedColumnSeg0\nConditionalSplit@Segment1 derive(Column1 = split(Code_segment,';')[1],\n\t\tColumn2 = split(Code_segment,';')[2],\n\t\tColumn3 = split(Code_segment,';')[3],\n\t\tColumn4 = currentUTC(),\n\t\tColumn5 = split(Code_segment,';')[5],\n\t\tColumn6 = split(Code_segment,';')[6],\n\t\tColumn7 = split(Code_segment,';')[7],\n\t\tColumn8 = split(Code_segment,';')[8],\n\t\tColumn9 = split(Code_segment,';')[9],\n\t\tColumn10 = split(Code_segment,';')[10],\n\t\tColumn11 = split(Code_segment,';')[11],\n\t\tColumn12 = split(Code_segment,';')[12]) ~> DerivedColumnSeg1\nConditionalSplit@Segment2 derive(Column1 = split(Code_segment,';')[1],\n\t\tColumn2 = split(Code_segment,';')[2],\n\t\tColumn3 = split(Code_segment,';')[3],\n\t\tColumn4 = split(Code_segment,';')[4],\n\t\tColumn5 = split(Code_segment,';')[5],\n\t\tColumn6 = split(Code_segment,';')[6],\n\t\tColumn7 = split(Code_segment,';')[7],\n\t\tColumn8 = split(Code_segment,';')[8],\n\t\tColumn9 = split(Code_segment,';')[9],\n\t\tColumn10 = split(Code_segment,';')[10],\n\t\tColumn11 = split(Code_segment,';')[11],\n\t\tColumn12 = split(Code_segment,';')[12],\n\t\tColumn13 = currentUTC(),\n\t\tColumn14 = currentUTC(),\n\t\tColumn15 = split(Code_segment,';')[15],\n\t\tColumn16 = split(Code_segment,';')[16],\n\t\tColumn17 = split(Code_segment,';')[17],\n\t\tColumn18 = split(Code_segment,';')[18],\n\t\tColumn19 = split(Code_segment,';')[19],\n\t\tColumn20 = split(Code_segment,';')[20],\n\t\tColumn21 = split(Code_segment,';')[21],\n\t\tColumn22 = split(Code_segment,';')[22],\n\t\tColumn23 = split(Code_segment,';')[23],\n\t\tColumn24 = split(Code_segment,';')[24],\n\t\tColumn25 = split(Code_segment,';')[25],\n\t\tColumn26 = split(Code_segment,';')[26],\n\t\tColumn27 = split(Code_segment,';')[27],\n\t\tColumn28 = split(Code_segment,';')[28],\n\t\tColumn29 = split(Code_segment,';')[29],\n\t\tColumn30 = split(Code_segment,';')[30]) ~> DerivedColumnSeg2\nConditionalSplit@Segment3 derive(Column1 = split(Code_segment,';')[1],\n\t\tColumn2 = split(Code_segment,';')[2],\n\t\tColumn3 = split(Code_segment,';')[3],\n\t\tColumn4 = split(Code_segment,';')[4],\n\t\tColumn5 = split(Code_segment,';')[5],\n\t\tColumn6 = split(Code_segment,';')[6],\n\t\tColumn7 = split(Code_segment,';')[7],\n\t\tColumn8 = split(Code_segment,';')[8],\n\t\tColumn9 = split(Code_segment,';')[9]) ~> DerivedColumnSeg3\nConditionalSplit@Segment5 derive(Column1 = split(Code_segment,';')[1],\n\t\tColumn2 = split(Code_segment,';')[2],\n\t\tColumn3 = split(Code_segment,';')[3],\n\t\tColumn4 = split(Code_segment,';')[4],\n\t\tColumn5 = split(Code_segment,';')[5],\n\t\tColumn6 = split(Code_segment,';')[6],\n\t\tColumn7 = split(Code_segment,';')[7],\n\t\tColumn8 = split(Code_segment,';')[8],\n\t\tColumn9 = split(Code_segment,';')[9],\n\t\tColumn10 = currentUTC(),\n\t\tColumn11 = split(Code_segment,';')[11],\n\t\tColumn12 = split(Code_segment,';')[12],\n\t\tColumn13 = split(Code_segment,';')[13]) ~> DerivedColumnseg5\nConditionalSplit@Segment4 derive(Column1 = split(Code_segment,';')[1],\n\t\tColumn2 = split(Code_segment,';')[2],\n\t\tColumn3 = split(Code_segment,';')[3],\n\t\tColumn4 = split(Code_segment,';')[4],\n\t\tColumn5 = split(Code_segment,';')[5],\n\t\tColumn6 = split(Code_segment,';')[6],\n\t\tColumn7 = split(Code_segment,';')[7],\n\t\tColumn8 = split(Code_segment,';')[8],\n\t\tColumn9 = split(Code_segment,';')[9],\n\t\tColumn10 = split(Code_segment,';')[10],\n\t\tColumn11 = split(Code_segment,';')[11],\n\t\tColumn12 = split(Code_segment,';')[12],\n\t\tColumn13 = split(Code_segment,';')[13],\n\t\tColumn14 = split(Code_segment,';')[14],\n\t\tColumn15 = currentUTC(),\n\t\tColumn16 = split(Code_segment,';')[16]) ~> DerivedColumnSeg4\nDerivedColumnSeg0 sink(input(\n\t\tCode_segment as string,\n\t\tPlateforme as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode_segment = Column1,\n\t\tPlateforme = Column2\n\t)) ~> SQLSegment0\nDerivedColumnSeg1 sink(input(\n\t\tCode_segment as string,\n\t\tPoste_segment as string,\n\t\tId_transaction as string,\n\t\tDate_ope as timestamp,\n\t\tType_equipement as string,\n\t\tNum_syst_emetteur as string,\n\t\tCEB as string,\n\t\tNum_serie as string,\n\t\tNum_service as string,\n\t\tCode_user as string,\n\t\tCompagnie_agent as string,\n\t\tType_emplacement as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode_segment = Column1,\n\t\tPoste_segment = Column2,\n\t\tId_transaction = Column3,\n\t\tDate_ope = Column4,\n\t\tType_equipement = Column5,\n\t\tNum_syst_emetteur = Column6,\n\t\tCEB = Column7,\n\t\tNum_serie = Column8,\n\t\tNum_service = Column9,\n\t\tCode_user = Column10,\n\t\tCompagnie_agent = Column11,\n\t\tType_emplacement = Column12\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLSegment1\nDerivedColumnSeg2 sink(input(\n\t\tCode_segment as string,\n\t\tPoste_segment as string,\n\t\tId_transaction as string,\n\t\tId_oper_vente as string,\n\t\tType_mvt as string,\n\t\tCateg_produit as string,\n\t\tNum_produit as string,\n\t\tNum_article as string,\n\t\tNum_unicite as string,\n\t\tNum_serie as string,\n\t\tNum_contrat as string,\n\t\tNum_serie_prev as string,\n\t\tDate_Debut as timestamp,\n\t\tDate_Fin as timestamp,\n\t\tId_entreprise as string,\n\t\tMontant_part_tiers as double,\n\t\t{Quantité} as string,\n\t\tTauxTVA_an as string,\n\t\tMontant_global_vente as double,\n\t\tNb_jetons as string,\n\t\tNb_jetons_avant as string,\n\t\tId_convention as string,\n\t\tLibelle_convention as string,\n\t\tNum_mobib as string,\n\t\tCode_article as string,\n\t\tNum_reseau_produit as string,\n\t\tNum_contrat_prev as string,\n\t\tNum_commande as string,\n\t\tNum_elt_commande as string,\n\t\tType_elt_commande as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode_segment = Column1,\n\t\tPoste_segment = Column2,\n\t\tId_transaction = Column3,\n\t\tId_oper_vente = Column4,\n\t\tType_mvt = Column5,\n\t\tCateg_produit = Column6,\n\t\tNum_produit = Column7,\n\t\tNum_article = Column8,\n\t\tNum_unicite = Column9,\n\t\tNum_serie = Column10,\n\t\tNum_contrat = Column11,\n\t\tNum_serie_prev = Column12,\n\t\tDate_Debut = Column13,\n\t\tDate_Fin = Column14,\n\t\tId_entreprise = Column15,\n\t\tMontant_part_tiers = Column16,\n\t\t{Quantité} = Column17,\n\t\tTauxTVA_an = Column18,\n\t\tMontant_global_vente = Column19,\n\t\tNb_jetons = Column20,\n\t\tNb_jetons_avant = Column21,\n\t\tId_convention = Column22,\n\t\tLibelle_convention = Column23,\n\t\tNum_mobib = Column24,\n\t\tCode_article = Column25,\n\t\tNum_reseau_produit = Column26,\n\t\tNum_contrat_prev = Column27,\n\t\tNum_commande = Column28,\n\t\tNum_elt_commande = Column29,\n\t\tType_elt_commande = Column30\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLSegment2\nDerivedColumnSeg3 sink(input(\n\t\tCode_segment as string,\n\t\tPoste_segment as string,\n\t\tId_transaction as string,\n\t\tId_paiement as string,\n\t\tCode_moyen_paiement as string,\n\t\tSens_paiement as string,\n\t\tMontant as double,\n\t\tId_entreprise as string,\n\t\tComm_struct as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode_segment = Column1,\n\t\tPoste_segment = Column2,\n\t\tId_transaction = Column3,\n\t\tId_paiement = Column4,\n\t\tCode_moyen_paiement = Column5,\n\t\tSens_paiement = Column6,\n\t\tMontant = Column7,\n\t\tId_entreprise = Column8,\n\t\tComm_struct = Column9\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLSegment3\nDerivedColumnSeg4 sink(input(\n\t\tCode_segment as string,\n\t\tPoste_segment as string,\n\t\tId_transaction as string,\n\t\tId_paiement as string,\n\t\tCode_moyen_paiement as string,\n\t\tSens_paiement as string,\n\t\tMontant as double,\n\t\tHardware_type as string,\n\t\tMode_TPV as string,\n\t\tBrand_id as string,\n\t\tMachine_number as string,\n\t\tPdv_clct_nr as string,\n\t\tPdv_gen_tx_nb as string,\n\t\tTransaction_identifier as string,\n\t\tDateh_tpe as timestamp,\n\t\tAuth_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode_segment = Column1,\n\t\tPoste_segment = Column2,\n\t\tId_transaction = Column3,\n\t\tId_paiement = Column4,\n\t\tCode_moyen_paiement = Column5,\n\t\tSens_paiement = Column6,\n\t\tMontant = Column7,\n\t\tHardware_type = Column8,\n\t\tMode_TPV = Column9,\n\t\tBrand_id = Column10,\n\t\tMachine_number = Column11,\n\t\tPdv_clct_nr = Column12,\n\t\tPdv_gen_tx_nb = Column13,\n\t\tTransaction_identifier = Column14,\n\t\tDateh_tpe = Column15,\n\t\tAuth_code = Column16\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLSegment4\nDerivedColumnseg5 sink(input(\n\t\tCode_segment as string,\n\t\tPoste_segment as string,\n\t\tId_transaction as string,\n\t\tId_paiement as string,\n\t\tTransactionReference as string,\n\t\tTransactionDateTime as string,\n\t\tSens_paiement as string,\n\t\tStatementReference as string,\n\t\tPaymentMeanBrand as string,\n\t\tValueDate as timestamp,\n\t\tAmount as double,\n\t\tAuthorizationId as string,\n\t\tMerchantId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode_segment = Column1,\n\t\tPoste_segment = Column2,\n\t\tId_transaction = Column3,\n\t\tId_paiement = Column4,\n\t\tTransactionReference = Column5,\n\t\tTransactionDateTime = Column6,\n\t\tSens_paiement = Column7,\n\t\tStatementReference = Column8,\n\t\tPaymentMeanBrand = Column9,\n\t\tValueDate = Column10,\n\t\tAmount = Column11,\n\t\tAuthorizationId = Column12,\n\t\tMerchantId = Column13\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLSegment5"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowcalander')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GTFScalendar",
								"type": "DatasetReference"
							},
							"name": "DataFlowCalendersource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLcalendar",
								"type": "DatasetReference"
							},
							"name": "sinktoSQLCalendar"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumntoconvertstringtodate"
						}
					],
					"script": "source(output(\n\t\tservice_id as string,\n\t\tmonday as string,\n\t\ttuesday as string,\n\t\twednesday as string,\n\t\tthursday as string,\n\t\tfriday as string,\n\t\tsaturday as string,\n\t\tsunday as string,\n\t\tstart_date as string,\n\t\tend_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DataFlowCalendersource\nDataFlowCalendersource derive(start_date = toDate(substring(start_date,1,4)+\"-\"+substring(start_date,5,2)+\"-\"+substring(start_date,7,2)),\n\t\tend_date = toDate(substring(end_date,1,4)+\"-\"+substring(end_date,5,2)+\"-\"+substring(end_date,7,2))) ~> DerivedColumntoconvertstringtodate\nDerivedColumntoconvertstringtodate sink(input(\n\t\tService_id as string,\n\t\tMonday as string,\n\t\tTuesday as string,\n\t\tWednesday as string,\n\t\tThursday as string,\n\t\tFriday as string,\n\t\tSaturday as string,\n\t\tSunday as string,\n\t\tStart_date as date,\n\t\tEnd_date as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tService_id = service_id,\n\t\tMonday = monday,\n\t\tTuesday = tuesday,\n\t\tWednesday = wednesday,\n\t\tThursday = thursday,\n\t\tFriday = friday,\n\t\tSaturday = saturday,\n\t\tSunday = sunday,\n\t\tStart_date = start_date,\n\t\tEnd_date = end_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinktoSQLCalendar"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowcalendardates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GTFScalendar_dates",
								"type": "DatasetReference"
							},
							"name": "dataflowcalendardatessource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLcalendar_dates",
								"type": "DatasetReference"
							},
							"name": "sinktocalendardatesSQLtable"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumntoconvertstringtodate"
						}
					],
					"script": "source(output(\n\t\tservice_id as string,\n\t\tdate as string,\n\t\texception_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> dataflowcalendardatessource\ndataflowcalendardatessource derive(date = toDate(substring(date,1,4)+\"-\"+substring(date,5,2)+\"-\"+substring(date,7,2))) ~> DerivedColumntoconvertstringtodate\nDerivedColumntoconvertstringtodate sink(input(\n\t\tService_id as string,\n\t\tDate as date,\n\t\tException_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tService_id = service_id,\n\t\tDate = date,\n\t\tException_type = exception_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinktocalendardatesSQLtable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLcalendar_dates')]"
			]
		}
	]
}