{
	"name": "dataflowtosplitcodafile",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Delimited_CODACSV",
						"type": "DatasetReference"
					},
					"name": "codacsvfromadls"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_CODA0",
						"type": "DatasetReference"
					},
					"name": "SQLCODA0"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sinkCODA1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "sinkCODA21"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					},
					"name": "sinkCODA22"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable4",
						"type": "DatasetReference"
					},
					"name": "sinkCODA23"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable6",
						"type": "DatasetReference"
					},
					"name": "sinkCODA31"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "sinkCODA32"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable8",
						"type": "DatasetReference"
					},
					"name": "sinkCODA33"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable9",
						"type": "DatasetReference"
					},
					"name": "sinkCODA8"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable10",
						"type": "DatasetReference"
					},
					"name": "sinkCODA9"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable11",
						"type": "DatasetReference"
					},
					"name": "sink1CODA4"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit"
				},
				{
					"name": "AssignHeaderRecords"
				},
				{
					"name": "AssignOldBalancerecords"
				},
				{
					"name": "Movement2Split"
				},
				{
					"name": "Assign21Columns"
				},
				{
					"name": "Assign22Columns"
				},
				{
					"name": "Assign23Columns"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "AssignColumn31"
				},
				{
					"name": "AssignColumn32"
				},
				{
					"name": "Assigncolumn33"
				},
				{
					"name": "AssignColumn8"
				},
				{
					"name": "AssignColumn9"
				},
				{
					"name": "AssignColumn4"
				}
			],
			"script": "source(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> codacsvfromadls\ncodacsvfromadls split(like(Column_1,'0%'),\n\tlike(Column_1,'1%'),\n\tlike(Column_1,'2%'),\n\tlike(Column_1,'3%'),\n\tlike(Column_1,'8%'),\n\tlike(Column_1,'9%'),\n\tlike(Column_1,'4%'),\n\tdisjoint: true) ~> ConditionalSplit@(HeaderRecord0, OldBalance1, Movement2, AdditionalInformation3, Newbalance8, TrailerRecord9, Freecommunications4, Others)\nConditionalSplit@HeaderRecord0 derive(HeaderColumn = substring(Column_1,1,1),\n\t\tZeros = substring(Column_1,2,4),\n\t\tCreationdate = toDate(\"20\"+substring(Column_1,10,2)+\"-\"+substring(Column_1,8,2)+\"-\"+substring(Column_1,6,2)),\n\t\tBankIdentificationNumber = substring(Column_1,12,3),\n\t\tApplicationCode = substring(Column_1,15,2),\n\t\tDuplicate = substring(Column_1,17,1),\n\t\tBlankColumn1 = substring(Column_1,18,7),\n\t\tCodeSeperateApplication = substring(Column_1,84,5),\n\t\tTransactionReferrence = substring(Column_1,89,16),\n\t\tRelatedReferrence = substring(Column_1,105,16),\n\t\tBlankColumn2 = substring(Column_1,83,1),\n\t\tVersionCode = substring(Column_1,128,1),\n\t\tFileReference = substring(Column_1,25,10),\n\t\tNameAddressee = substring(Column_1,35,26),\n\t\tBIC = substring(Column_1,61,11),\n\t\tIdentificationNumberOfBelgium = substring(Column_1,72,11),\n\t\tBlankColumn3 = substring(Column_1,121,7)) ~> AssignHeaderRecords\nConditionalSplit@OldBalance1 derive({RegistrationID } = substring(Column_1,1,1),\n\t\tBankAccountType = substring(Column_1,2,1),\n\t\tSequencenumberofpaperaccount = substring(Column_1,3,3),\n\t\tAccountnumber = substring(Column_1,6,37),\n\t\tOldbalance = substring(Column_1,43,1),\n\t\tOldpay = toDecimal((substring(Column_1,44,12)+\".\"+substring(Column_1,56,3)),15,3),\n\t\tDateofoldbalance = toDate(\"20\"+substring(Column_1,63,2)+\"-\"+substring(Column_1,61,2)+\"-\"+substring(Column_1,59,2)),\n\t\tAccountholdername = substring(Column_1,65,26),\n\t\tAccounttagged = substring(Column_1,91,35),\n\t\t{Sequencenumberofthecodified } = substring(Column_1,126,3)) ~> AssignOldBalancerecords\nConditionalSplit@Movement2 split(like(Column_1,'21%'),\n\tlike(Column_1,'22%'),\n\tlike(Column_1,'23%'),\n\tdisjoint: true) ~> Movement2Split@(Movement21, Movement22, Movement23, NoMovement)\nMovement2Split@Movement21 derive(RegistrationID = substring(Column_1,1,1),\n\t\tArticleCode = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tbankreferencenumber = substring(Column_1,11,21),\n\t\tMovementsign = substring(Column_1,32,1),\n\t\tAmount = iif(substring(Column_1,32,1)==\"0\",toDecimal((\"+\"+substring(Column_1,33,12)+\".\"+substring(Column_1,45,3)),15,3),toDecimal((\"-\"+substring(Column_1,33,12)+\".\"+substring(Column_1,45,3)),15,3)),\n\t\t{Valuedate } = toDate(\"20\"+substring(Column_1,52,2)+\"-\"+substring(Column_1,50,2)+\"-\"+substring(Column_1,48,2)),\n\t\tOperationCode = substring(Column_1,54,8),\n\t\tcommunicationtype = substring(Column_1,62,1),\n\t\tCommunicationzone = substring(Column_1,63,53),\n\t\t{Accountdate } = toDate(\"20\"+substring(Column_1,120,2)+\"-\"+substring(Column_1,118,2)+\"-\"+substring(Column_1,116,2)),\n\t\t{Sequencenumberofpaperaccount } = substring(Column_1,122,3),\n\t\tCodeglobalization = substring(Column_1,125,1),\n\t\tCodesuite = substring(Column_1,126,1),\n\t\tBlankColumn = substring(Column_1,127,1),\n\t\tLinkcode = substring(Column_1,128,1)) ~> Assign21Columns\nMovement2Split@Movement22 derive(RegistrationID = substring(Column_1,1,1),\n\t\tArticleCode = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tCommunication = substring(Column_1,11,53),\n\t\tCustomerreference = substring(Column_1,64,35),\n\t\tBIC = substring(Column_1,99,11),\n\t\tBlankColumn1 = substring(Column_1,110,3),\n\t\tTransactiontype = substring(Column_1,113,1),\n\t\tISOCode = substring(Column_1,114,4),\n\t\tCategoryPurpose = substring(Column_1,118,4),\n\t\tPurpose = substring(Column_1,122,4),\n\t\tMoreCode = substring(Column_1,126,1),\n\t\tBlankColumn2 = substring(Column_1,127,1),\n\t\tLinkcode = substring(Column_1,128,1)) ~> Assign22Columns\nMovement2Split@Movement23 derive(RegistrationID = substring(Column_1,1,1),\n\t\tArticleCode = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tCounterpartyaccountnumber = substring(Column_1,11,37),\n\t\tNameofcounterparty = substring(Column_1,48,35),\n\t\tCommunication = substring(Column_1,83,43),\n\t\tSuiteCode = substring(Column_1,126,1),\n\t\tBlankColumn = substring(Column_1,127,1),\n\t\tLinkcode = substring(Column_1,128,1)) ~> Assign23Columns\nConditionalSplit@AdditionalInformation3 split(like(Column_1,'31%'),\n\tlike(Column_1,'32%'),\n\tlike(Column_1,'33%'),\n\tdisjoint: false) ~> ConditionalSplit1@(AdditionalInformation31, AdditionalInformation32, AdditionalInformation33, NoMatching)\nConditionalSplit1@AdditionalInformation31 derive(RegistrationID = substring(Column_1,1,1),\n\t\tArticleCode = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tAdditionalInformation = substring(Column_1,11,21),\n\t\tOperationCode = substring(Column_1,32,8),\n\t\tCommunicationCode = substring(Column_1,40,1),\n\t\tCommunication = substring(Column_1,41,73),\n\t\tBlankColumn1 = substring(Column_1,114,12),\n\t\tMoreCode = substring(Column_1,126,1),\n\t\tBlankColumn2 = substring(Column_1,127,1),\n\t\tLinkCode = substring(Column_1,128,1)) ~> AssignColumn31\nConditionalSplit1@AdditionalInformation32 derive(RegistrationID = substring(Column_1,1,1),\n\t\tArticleCode = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tCommunication = substring(Column_1,11,105),\n\t\tBlankColumn1 = substring(Column_1,116,10),\n\t\tCodesuite = substring(Column_1,126,1),\n\t\tBlankColumn2 = substring(Column_1,127,1),\n\t\tLinkCode = substring(Column_1,128,1)) ~> AssignColumn32\nConditionalSplit1@AdditionalInformation33 derive(RegistrationID = substring(Column_1,1,1),\n\t\tArticleCode = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tCommunication = substring(Column_1,11,90),\n\t\tBlankColumn1 = substring(Column_1,101,25),\n\t\tCodesuite = substring(Column_1,126,1),\n\t\tBlankColumn2 = substring(Column_1,127,1),\n\t\tLinkCode = substring(Column_1,128,1)) ~> Assigncolumn33\nConditionalSplit@Newbalance8 derive({RegistrationID } = substring(Column_1,1,1),\n\t\tSequencenumber = substring(Column_1,2,3),\n\t\tAccountnumber = substring(Column_1,5,37),\n\t\tSignCode = substring(Column_1,42,1),\n\t\tNewBalance = toDecimal((substring(Column_1,43,12)+\".\"+substring(Column_1,55,3)),15,3),\n\t\t{Dateofnewbalance } = toDate(\"20\"+substring(Column_1,62,2)+\"-\"+substring(Column_1,60,2)+\"-\"+substring(Column_1,58,2)),\n\t\tBlankColumn = substring(Column_1,64,64),\n\t\tLinkCode = substring(Column_1,128,1)) ~> AssignColumn8\nConditionalSplit@TrailerRecord9 derive(RegistrationID = substring(Column_1,1,1),\n\t\tBlankColumn1 = substring(Column_1,2,15),\n\t\tNumberofrecords = substring(Column_1,17,6),\n\t\tDebitRevenue = toDecimal((substring(Column_1,23,12)+\".\"+substring(Column_1,35,3)),15,3),\n\t\tCreditSales = toDecimal((substring(Column_1,38,12)+\".\"+substring(Column_1,50,3)),15,3),\n\t\tBlankColumn2 = substring(Column_1,53,75),\n\t\tMultiplefilecode = substring(Column_1,128,1)) ~> AssignColumn9\nConditionalSplit@Freecommunications4 derive(RegistrationID = substring(Column_1,1,1),\n\t\tBlankColumn1 = substring(Column_1,2,1),\n\t\tSequencenumber = substring(Column_1,3,4),\n\t\tRetailnumber = substring(Column_1,7,4),\n\t\tBlankColumn2 = substring(Column_1,11,22),\n\t\tTextofthefreemessage = substring(Column_1,33,80),\n\t\tBlankColumn3 = substring(Column_1,113,15),\n\t\tLinkCode = substring(Column_1,128,1)) ~> AssignColumn4\nAssignHeaderRecords sink(input(\n\t\tRecordIdentification as string,\n\t\tZeros as string,\n\t\tCreationDate as date,\n\t\tBankIdentificationNumber as string,\n\t\tApplicationCode as string,\n\t\tDuplicate as string,\n\t\tBlankColumn1 as string,\n\t\tFileReference as string,\n\t\tNameAddressee as string,\n\t\tBIC as string,\n\t\tIdentificationNumberofBelgium as string,\n\t\tBlankColumn2 as string,\n\t\tCodeSeperateApplication as string,\n\t\tTransactionReferrence as string,\n\t\tRelatedReferrence as string,\n\t\tBlankColumn3 as string,\n\t\tVersionCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-0]'],\n\tmapColumn(\n\t\tRecordIdentification = HeaderColumn,\n\t\tZeros,\n\t\tCreationDate = Creationdate,\n\t\tBankIdentificationNumber,\n\t\tApplicationCode,\n\t\tDuplicate,\n\t\tBlankColumn1,\n\t\tFileReference,\n\t\tNameAddressee,\n\t\tBIC,\n\t\tIdentificationNumberofBelgium = IdentificationNumberOfBelgium,\n\t\tBlankColumn2,\n\t\tCodeSeperateApplication,\n\t\tTransactionReferrence,\n\t\tRelatedReferrence,\n\t\tBlankColumn3,\n\t\tVersionCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLCODA0\nAssignOldBalancerecords sink(input(\n\t\tRegistrationID as string,\n\t\tBankAccountType as string,\n\t\tSequencenumberofpaperaccount as string,\n\t\tAccountnumber as string,\n\t\tOldbalance as string,\n\t\tOldpay as decimal(15,3),\n\t\tDateofoldbalance as date,\n\t\tAccountholdername as string,\n\t\tAccounttagged as string,\n\t\tSequencenumberofthecodified as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['\\nDELETE FROM [dbo].[COD-1]'],\n\tmapColumn(\n\t\tRegistrationID = {RegistrationID },\n\t\tBankAccountType,\n\t\tSequencenumberofpaperaccount,\n\t\tAccountnumber,\n\t\tOldbalance,\n\t\tOldpay,\n\t\tDateofoldbalance,\n\t\tAccountholdername,\n\t\tAccounttagged,\n\t\tSequencenumberofthecodified = {Sequencenumberofthecodified }\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA1\nAssign21Columns sink(input(\n\t\tRegistrationID as string,\n\t\tArticleCode as string,\n\t\tSequencenumber as string,\n\t\tRetailnumber as string,\n\t\tbankreferencenumber as string,\n\t\tMovementsign as string,\n\t\tAmount as decimal(15,3),\n\t\tValuedate as date,\n\t\tOperationCode as string,\n\t\tcommunicationtype as string,\n\t\tCommunicationzone as string,\n\t\tAccountdate as date,\n\t\tSequencenumberofpaperaccount as string,\n\t\tCodeglobalization as string,\n\t\tCodesuite as string,\n\t\tBlankColumn as string,\n\t\tLinkcode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-21]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tArticleCode,\n\t\tSequencenumber,\n\t\tRetailnumber,\n\t\tbankreferencenumber,\n\t\tMovementsign,\n\t\tAmount,\n\t\tValuedate = {Valuedate },\n\t\tOperationCode,\n\t\tcommunicationtype,\n\t\tCommunicationzone,\n\t\tAccountdate = {Accountdate },\n\t\tSequencenumberofpaperaccount = {Sequencenumberofpaperaccount },\n\t\tCodeglobalization,\n\t\tCodesuite,\n\t\tBlankColumn,\n\t\tLinkcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA21\nAssign22Columns sink(input(\n\t\tRegistrationID as string,\n\t\tArticleCode as string,\n\t\tSequencenumber as string,\n\t\tRetailnumber as string,\n\t\tCommunication as string,\n\t\tCustomerreference as string,\n\t\tBIC as string,\n\t\tBlankColumn1 as string,\n\t\tTransactiontype as string,\n\t\tISOCode as string,\n\t\tCategoryPurpose as string,\n\t\tPurpose as string,\n\t\tMoreCode as string,\n\t\tBlankColumn2 as string,\n\t\tLinkcode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-22]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tArticleCode,\n\t\tSequencenumber,\n\t\tRetailnumber,\n\t\tCommunication,\n\t\tCustomerreference,\n\t\tBIC,\n\t\tBlankColumn1,\n\t\tTransactiontype,\n\t\tISOCode,\n\t\tCategoryPurpose,\n\t\tPurpose,\n\t\tMoreCode,\n\t\tBlankColumn2,\n\t\tLinkcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA22\nAssign23Columns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-23]'],\n\tmapColumn(\n\t\tColumn_1,\n\t\tRegistrationID,\n\t\tArticleCode,\n\t\tSequencenumber,\n\t\tRetailnumber,\n\t\tCounterpartyaccountnumber,\n\t\tNameofcounterparty,\n\t\tCommunication,\n\t\tSuiteCode,\n\t\tBlankColumn,\n\t\tLinkcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA23\nAssignColumn31 sink(input(\n\t\tRegistrationID as string,\n\t\tArticleCode as string,\n\t\tSequencenumber as string,\n\t\tRetailnumber as string,\n\t\tAdditionalInformation as string,\n\t\tOperationCode as string,\n\t\tCommunicationCode as string,\n\t\tCommunication as string,\n\t\tBlankColumn1 as string,\n\t\tMoreCode as string,\n\t\tBlankColumn2 as string,\n\t\tLinkCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-31]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tArticleCode,\n\t\tSequencenumber,\n\t\tRetailnumber,\n\t\tAdditionalInformation,\n\t\tOperationCode,\n\t\tCommunicationCode,\n\t\tCommunication,\n\t\tBlankColumn1,\n\t\tMoreCode,\n\t\tBlankColumn2,\n\t\tLinkCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA31\nAssignColumn32 sink(input(\n\t\tRegistrationID as string,\n\t\tArticleCode as string,\n\t\tSequencenumber as string,\n\t\tRetailnumber as string,\n\t\tCommunication as string,\n\t\tBlankColumn1 as string,\n\t\tCodesuite as string,\n\t\tBlankColumn2 as string,\n\t\tLinkCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-32]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tArticleCode,\n\t\tSequencenumber,\n\t\tRetailnumber,\n\t\tCommunication,\n\t\tBlankColumn1,\n\t\tCodesuite,\n\t\tBlankColumn2,\n\t\tLinkCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA32\nAssigncolumn33 sink(input(\n\t\tRegistrationID as string,\n\t\tArticleCode as string,\n\t\tSequencenumber as string,\n\t\tRetailnumber as string,\n\t\tCommunication as string,\n\t\tBlankColumn1 as string,\n\t\tCodesuite as string,\n\t\tBlankColumn2 as string,\n\t\tLinkCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-33]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tArticleCode,\n\t\tSequencenumber,\n\t\tRetailnumber,\n\t\tCommunication,\n\t\tBlankColumn1,\n\t\tCodesuite,\n\t\tBlankColumn2,\n\t\tLinkCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA33\nAssignColumn8 sink(input(\n\t\tRegistrationID as string,\n\t\tSequencenumber as string,\n\t\tAccountnumber as string,\n\t\tSignCode as string,\n\t\tNewBalance as decimal(15,3),\n\t\tDateofnewbalance as date,\n\t\tBlankColumn as string,\n\t\tLinkCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-8]'],\n\tmapColumn(\n\t\tRegistrationID = {RegistrationID },\n\t\tSequencenumber,\n\t\tAccountnumber,\n\t\tSignCode,\n\t\tNewBalance,\n\t\tDateofnewbalance = {Dateofnewbalance },\n\t\tBlankColumn,\n\t\tLinkCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA8\nAssignColumn9 sink(input(\n\t\tRegistrationID as string,\n\t\tBlankColumn1 as string,\n\t\tNumberofrecords as string,\n\t\tDebitRevenue as decimal(15,3),\n\t\tCreditSales as decimal(15,3),\n\t\tBlankColumn2 as string,\n\t\tMultiplefilecode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-9]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tBlankColumn1,\n\t\tNumberofrecords,\n\t\tDebitRevenue,\n\t\tCreditSales,\n\t\tBlankColumn2,\n\t\tMultiplefilecode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCODA9\nAssignColumn4 sink(input(\n\t\tRegistrationID as string,\n\t\tBlankColumn1 as string,\n\t\tSequenceNumber as string,\n\t\tRetailNumber as string,\n\t\tBlankColumn2 as string,\n\t\tTextofthefreemessage as string,\n\t\tBlankColumn3 as string,\n\t\tLinkCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['DELETE FROM [dbo].[COD-4]'],\n\tmapColumn(\n\t\tRegistrationID,\n\t\tBlankColumn1,\n\t\tSequenceNumber = Sequencenumber,\n\t\tRetailNumber = Retailnumber,\n\t\tBlankColumn2,\n\t\tTextofthefreemessage,\n\t\tBlankColumn3,\n\t\tLinkCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1CODA4"
		}
	}
}